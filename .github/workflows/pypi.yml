name: Python - Test and build

on:
  push:
    paths-ignore:
      - '.github/workflows/pypi.yml'

  pull_request:
    paths-ignore:
      - '.github/workflows/pypi.yml'

  workflow_dispatch:
    inputs:
      tag_name:
        description: "The tag to checkout"
        required: true
        type: string
      publish:
        description: If and where to publish
        required: true
        type: choice
        options:
          - Skip
          - pypi
          - test.pypi
        default: Skip

jobs:
  build:
    name: Build distributions
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        python-version: [ "3.13" ]
        poetry-version: [ "latest" ]
      fail-fast: false
    outputs:
      build_artifacts: ${{ steps.artifact-upload-step.outputs.artifact-id }}
    steps:
      - uses: actions/checkout@v4
        name: Checkout
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' &&  inputs.tag_name || '' }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Setup poetry
        uses: abatilo/actions-poetry@v4
        with:
          poetry-version: ${{ matrix.poetry-version }}
      - name: Setup a local virtual environment (if no poetry.toml file)
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
      - uses: actions/cache@v4
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}
      - name: Install the project dependencies
        run: poetry install
      - name: Test with pytest (with coverage)
        run: |
          poetry run pytest \
            --cov=src/kubernetes \
            --cov-report=xml:coverage-${{ matrix.python-version }}.xml \
            --cov-report html:htmlcov-${{ matrix.python-version }}
      - name: Upload pytest test results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: |
            coverage-${{ matrix.python-version }}.xml
            htmlcov-${{ matrix.python-version }}
          # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}
      - name: Build sdist
        run: poetry build --clean
      - name: artifact-upload-step
        uses: actions/upload-artifact@v4
        with:
          path: dist/
          name: dist

  pypi-publish:
    name: Upload release to PyPI
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: ${{ inputs.publish }}
      # url: https://pypi.org/p/kubernetes-client-urllib3-pydantic
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v5
        with:
          artifact-ids: ${{ needs.build.outputs.artifact-id }}
          name: dist
          path: dist/
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.publish == 'pypi' }}
        with:
          verbose: true
          print-hash: true
          packages-dir: dist/
          repository-url: https://upload.pypi.org/legacy/
      - name: Publish package distributions to test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.publish == 'test.pypi' }}
        with:
          verbose: false
          print-hash: true
          packages-dir: dist/
          repository-url: https://test.pypi.org/legacy/
