# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from kubernetes.models.v1_pod_spec import V1PodSpec

class TestV1PodSpec(unittest.TestCase):
    """V1PodSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1PodSpec:
        """Test V1PodSpec
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1PodSpec`
        """
        model = V1PodSpec()
        if include_optional:
            return V1PodSpec(
                active_deadline_seconds = 56,
                affinity = kubernetes.models.v1/affinity.v1.Affinity(
                    node_affinity = null, 
                    pod_affinity = null, 
                    pod_anti_affinity = null, ),
                automount_service_account_token = True,
                containers = [
                    null
                    ],
                dns_config = kubernetes.models.v1/pod_dns_config.v1.PodDNSConfig(
                    nameservers = [
                        ''
                        ], 
                    options = [
                        null
                        ], 
                    searches = [
                        ''
                        ], ),
                dns_policy = '',
                enable_service_links = True,
                ephemeral_containers = [
                    null
                    ],
                host_aliases = [
                    null
                    ],
                host_ipc = True,
                host_network = True,
                host_pid = True,
                host_users = True,
                hostname = '',
                image_pull_secrets = [
                    null
                    ],
                init_containers = [
                    null
                    ],
                node_name = '',
                node_selector = {
                    'key' : ''
                    },
                os = kubernetes.models.v1/pod_os.v1.PodOS(
                    name = '', ),
                overhead = {
                    'key' : kubernetes.models.v1_pod_spec_overhead_value.v1_PodSpec_overhead_value()
                    },
                preemption_policy = '',
                priority = 56,
                priority_class_name = '',
                readiness_gates = [
                    null
                    ],
                resource_claims = [
                    null
                    ],
                resources = kubernetes.models.v1/resource_requirements.v1.ResourceRequirements(
                    claims = [
                        null
                        ], 
                    limits = {
                        'key' : kubernetes.models.v1_pod_spec_overhead_value.v1_PodSpec_overhead_value()
                        }, 
                    requests = {
                        'key' : kubernetes.models.v1_pod_spec_overhead_value.v1_PodSpec_overhead_value()
                        }, ),
                restart_policy = '',
                runtime_class_name = '',
                scheduler_name = '',
                scheduling_gates = [
                    null
                    ],
                security_context = kubernetes.models.v1/pod_security_context.v1.PodSecurityContext(
                    app_armor_profile = null, 
                    fs_group = 56, 
                    fs_group_change_policy = '', 
                    run_as_group = 56, 
                    run_as_non_root = True, 
                    run_as_user = 56, 
                    se_linux_change_policy = '', 
                    se_linux_options = null, 
                    seccomp_profile = null, 
                    supplemental_groups = [
                        56
                        ], 
                    supplemental_groups_policy = '', 
                    sysctls = [
                        null
                        ], 
                    windows_options = null, ),
                service_account = '',
                service_account_name = '',
                set_hostname_as_fqdn = True,
                share_process_namespace = True,
                subdomain = '',
                termination_grace_period_seconds = 56,
                tolerations = [
                    null
                    ],
                topology_spread_constraints = [
                    null
                    ],
                volumes = [
                    null
                    ]
            )
        else:
            return V1PodSpec(
                containers = [
                    null
                    ],
        )
        """

    def testV1PodSpec(self):
        """Test V1PodSpec"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
