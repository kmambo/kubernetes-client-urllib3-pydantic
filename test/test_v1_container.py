# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from kubernetes.models.v1_container import V1Container

class TestV1Container(unittest.TestCase):
    """V1Container unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1Container:
        """Test V1Container
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1Container`
        """
        model = V1Container()
        if include_optional:
            return V1Container(
                args = [
                    ''
                    ],
                command = [
                    ''
                    ],
                env = [
                    null
                    ],
                env_from = [
                    null
                    ],
                image = '',
                image_pull_policy = '',
                lifecycle = kubernetes.models.v1/lifecycle.v1.Lifecycle(
                    post_start = null, 
                    pre_stop = null, ),
                liveness_probe = kubernetes.models.v1/probe.v1.Probe(
                    exec = null, 
                    failure_threshold = 56, 
                    grpc = null, 
                    http_get = null, 
                    initial_delay_seconds = 56, 
                    period_seconds = 56, 
                    success_threshold = 56, 
                    tcp_socket = null, 
                    termination_grace_period_seconds = 56, 
                    timeout_seconds = 56, ),
                name = '',
                ports = [
                    null
                    ],
                readiness_probe = kubernetes.models.v1/probe.v1.Probe(
                    exec = null, 
                    failure_threshold = 56, 
                    grpc = null, 
                    http_get = null, 
                    initial_delay_seconds = 56, 
                    period_seconds = 56, 
                    success_threshold = 56, 
                    tcp_socket = null, 
                    termination_grace_period_seconds = 56, 
                    timeout_seconds = 56, ),
                resize_policy = [
                    null
                    ],
                resources = kubernetes.models.v1/resource_requirements.v1.ResourceRequirements(
                    claims = [
                        null
                        ], 
                    limits = {
                        'key' : kubernetes.models.v1_pod_spec_overhead_value.v1_PodSpec_overhead_value()
                        }, 
                    requests = {
                        'key' : kubernetes.models.v1_pod_spec_overhead_value.v1_PodSpec_overhead_value()
                        }, ),
                restart_policy = '',
                security_context = kubernetes.models.v1/security_context.v1.SecurityContext(
                    allow_privilege_escalation = True, 
                    app_armor_profile = null, 
                    capabilities = null, 
                    privileged = True, 
                    proc_mount = '', 
                    read_only_root_filesystem = True, 
                    run_as_group = 56, 
                    run_as_non_root = True, 
                    run_as_user = 56, 
                    se_linux_options = null, 
                    seccomp_profile = null, 
                    windows_options = null, ),
                startup_probe = kubernetes.models.v1/probe.v1.Probe(
                    exec = null, 
                    failure_threshold = 56, 
                    grpc = null, 
                    http_get = null, 
                    initial_delay_seconds = 56, 
                    period_seconds = 56, 
                    success_threshold = 56, 
                    tcp_socket = null, 
                    termination_grace_period_seconds = 56, 
                    timeout_seconds = 56, ),
                stdin = True,
                stdin_once = True,
                termination_message_path = '',
                termination_message_policy = '',
                tty = True,
                volume_devices = [
                    null
                    ],
                volume_mounts = [
                    null
                    ],
                working_dir = ''
            )
        else:
            return V1Container(
                name = '',
        )
        """

    def testV1Container(self):
        """Test V1Container"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
