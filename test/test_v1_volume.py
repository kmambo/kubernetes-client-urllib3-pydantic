# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from kubernetes.models.v1_volume import V1Volume

class TestV1Volume(unittest.TestCase):
    """V1Volume unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1Volume:
        """Test V1Volume
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1Volume`
        """
        model = V1Volume()
        if include_optional:
            return V1Volume(
                aws_elastic_block_store = kubernetes.models.v1/aws_elastic_block_store_volume_source.v1.AWSElasticBlockStoreVolumeSource(
                    fs_type = '', 
                    partition = 56, 
                    read_only = True, 
                    volume_id = '', ),
                azure_disk = kubernetes.models.v1/azure_disk_volume_source.v1.AzureDiskVolumeSource(
                    caching_mode = 'ReadWrite', 
                    disk_name = '', 
                    disk_uri = '', 
                    fs_type = 'ext4', 
                    kind = 'Shared', 
                    read_only = True, ),
                azure_file = kubernetes.models.v1/azure_file_volume_source.v1.AzureFileVolumeSource(
                    read_only = True, 
                    secret_name = '', 
                    share_name = '', ),
                cephfs = kubernetes.models.v1/ceph_fs_volume_source.v1.CephFSVolumeSource(
                    monitors = [
                        ''
                        ], 
                    path = '', 
                    read_only = True, 
                    secret_file = '', 
                    secret_ref = null, 
                    user = '', ),
                cinder = kubernetes.models.v1/cinder_volume_source.v1.CinderVolumeSource(
                    fs_type = '', 
                    read_only = True, 
                    secret_ref = null, 
                    volume_id = '', ),
                config_map = kubernetes.models.v1/config_map_volume_source.v1.ConfigMapVolumeSource(
                    default_mode = 56, 
                    items = [
                        null
                        ], 
                    name = '', 
                    optional = True, ),
                csi = kubernetes.models.v1/csi_volume_source.v1.CSIVolumeSource(
                    driver = '', 
                    fs_type = '', 
                    node_publish_secret_ref = null, 
                    read_only = True, 
                    volume_attributes = {
                        'key' : ''
                        }, ),
                downward_api = kubernetes.models.v1/downward_api_volume_source.v1.DownwardAPIVolumeSource(
                    default_mode = 56, 
                    items = [
                        null
                        ], ),
                empty_dir = kubernetes.models.v1/empty_dir_volume_source.v1.EmptyDirVolumeSource(
                    medium = '', 
                    size_limit = null, ),
                ephemeral = kubernetes.models.v1/ephemeral_volume_source.v1.EphemeralVolumeSource(
                    volume_claim_template = null, ),
                fc = kubernetes.models.v1/fc_volume_source.v1.FCVolumeSource(
                    fs_type = '', 
                    lun = 56, 
                    read_only = True, 
                    target_wwns = [
                        ''
                        ], 
                    wwids = [
                        ''
                        ], ),
                flex_volume = kubernetes.models.v1/flex_volume_source.v1.FlexVolumeSource(
                    driver = '', 
                    fs_type = '', 
                    options = {
                        'key' : ''
                        }, 
                    read_only = True, 
                    secret_ref = null, ),
                flocker = kubernetes.models.v1/flocker_volume_source.v1.FlockerVolumeSource(
                    dataset_name = '', 
                    dataset_uuid = '', ),
                gce_persistent_disk = kubernetes.models.v1/gce_persistent_disk_volume_source.v1.GCEPersistentDiskVolumeSource(
                    fs_type = '', 
                    partition = 56, 
                    pd_name = '', 
                    read_only = True, ),
                git_repo = kubernetes.models.v1/git_repo_volume_source.v1.GitRepoVolumeSource(
                    directory = '', 
                    repository = '', 
                    revision = '', ),
                glusterfs = kubernetes.models.v1/glusterfs_volume_source.v1.GlusterfsVolumeSource(
                    endpoints = '', 
                    path = '', 
                    read_only = True, ),
                host_path = kubernetes.models.v1/host_path_volume_source.v1.HostPathVolumeSource(
                    path = '', 
                    type = '', ),
                image = kubernetes.models.v1/image_volume_source.v1.ImageVolumeSource(
                    pull_policy = '', 
                    reference = '', ),
                iscsi = kubernetes.models.v1/iscsi_volume_source.v1.ISCSIVolumeSource(
                    chap_auth_discovery = True, 
                    chap_auth_session = True, 
                    fs_type = '', 
                    initiator_name = '', 
                    iqn = '', 
                    iscsi_interface = 'default', 
                    lun = 56, 
                    portals = [
                        ''
                        ], 
                    read_only = True, 
                    secret_ref = null, 
                    target_portal = '', ),
                name = '',
                nfs = kubernetes.models.v1/nfs_volume_source.v1.NFSVolumeSource(
                    path = '', 
                    read_only = True, 
                    server = '', ),
                persistent_volume_claim = kubernetes.models.v1/persistent_volume_claim_volume_source.v1.PersistentVolumeClaimVolumeSource(
                    claim_name = '', 
                    read_only = True, ),
                photon_persistent_disk = kubernetes.models.v1/photon_persistent_disk_volume_source.v1.PhotonPersistentDiskVolumeSource(
                    fs_type = '', 
                    pd_id = '', ),
                portworx_volume = kubernetes.models.v1/portworx_volume_source.v1.PortworxVolumeSource(
                    fs_type = '', 
                    read_only = True, 
                    volume_id = '', ),
                projected = kubernetes.models.v1/projected_volume_source.v1.ProjectedVolumeSource(
                    default_mode = 56, 
                    sources = [
                        null
                        ], ),
                quobyte = kubernetes.models.v1/quobyte_volume_source.v1.QuobyteVolumeSource(
                    group = '', 
                    read_only = True, 
                    registry = '', 
                    tenant = '', 
                    user = '', 
                    volume = '', ),
                rbd = kubernetes.models.v1/rbd_volume_source.v1.RBDVolumeSource(
                    fs_type = '', 
                    image = '', 
                    keyring = '/etc/ceph/keyring', 
                    monitors = [
                        ''
                        ], 
                    pool = 'rbd', 
                    read_only = True, 
                    secret_ref = null, 
                    user = 'admin', ),
                scale_io = kubernetes.models.v1/scale_io_volume_source.v1.ScaleIOVolumeSource(
                    fs_type = 'xfs', 
                    gateway = '', 
                    protection_domain = '', 
                    read_only = True, 
                    secret_ref = null, 
                    ssl_enabled = True, 
                    storage_mode = 'ThinProvisioned', 
                    storage_pool = '', 
                    system = '', 
                    volume_name = '', ),
                secret = kubernetes.models.v1/secret_volume_source.v1.SecretVolumeSource(
                    default_mode = 56, 
                    items = [
                        null
                        ], 
                    optional = True, 
                    secret_name = '', ),
                storageos = kubernetes.models.v1/storage_os_volume_source.v1.StorageOSVolumeSource(
                    fs_type = '', 
                    read_only = True, 
                    secret_ref = null, 
                    volume_name = '', 
                    volume_namespace = '', ),
                vsphere_volume = kubernetes.models.v1/vsphere_virtual_disk_volume_source.v1.VsphereVirtualDiskVolumeSource(
                    fs_type = '', 
                    storage_policy_id = '', 
                    storage_policy_name = '', 
                    volume_path = '', )
            )
        else:
            return V1Volume(
                name = '',
        )
        """

    def testV1Volume(self):
        """Test V1Volume"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
