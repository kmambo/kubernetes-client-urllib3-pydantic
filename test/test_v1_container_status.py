# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from kubernetes.models.v1_container_status import V1ContainerStatus

class TestV1ContainerStatus(unittest.TestCase):
    """V1ContainerStatus unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1ContainerStatus:
        """Test V1ContainerStatus
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1ContainerStatus`
        """
        model = V1ContainerStatus()
        if include_optional:
            return V1ContainerStatus(
                allocated_resources = {
                    'key' : kubernetes.models.v1_pod_spec_overhead_value.v1_PodSpec_overhead_value()
                    },
                allocated_resources_status = [
                    null
                    ],
                container_id = '',
                image = '',
                image_id = '',
                last_state = kubernetes.models.v1/container_state.v1.ContainerState(
                    running = null, 
                    terminated = null, 
                    waiting = null, ),
                name = '',
                ready = True,
                resources = kubernetes.models.v1/resource_requirements.v1.ResourceRequirements(
                    claims = [
                        null
                        ], 
                    limits = {
                        'key' : kubernetes.models.v1_pod_spec_overhead_value.v1_PodSpec_overhead_value()
                        }, 
                    requests = {
                        'key' : kubernetes.models.v1_pod_spec_overhead_value.v1_PodSpec_overhead_value()
                        }, ),
                restart_count = 56,
                started = True,
                state = kubernetes.models.v1/container_state.v1.ContainerState(
                    running = null, 
                    terminated = null, 
                    waiting = null, ),
                user = kubernetes.models.v1/container_user.v1.ContainerUser(
                    linux = null, ),
                volume_mounts = [
                    null
                    ]
            )
        else:
            return V1ContainerStatus(
                image = '',
                image_id = '',
                name = '',
                ready = True,
                restart_count = 56,
        )
        """

    def testV1ContainerStatus(self):
        """Test V1ContainerStatus"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
