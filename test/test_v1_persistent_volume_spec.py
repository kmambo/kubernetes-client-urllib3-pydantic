# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from kubernetes.models.v1_persistent_volume_spec import V1PersistentVolumeSpec

class TestV1PersistentVolumeSpec(unittest.TestCase):
    """V1PersistentVolumeSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1PersistentVolumeSpec:
        """Test V1PersistentVolumeSpec
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1PersistentVolumeSpec`
        """
        model = V1PersistentVolumeSpec()
        if include_optional:
            return V1PersistentVolumeSpec(
                access_modes = [
                    ''
                    ],
                aws_elastic_block_store = kubernetes.models.v1/aws_elastic_block_store_volume_source.v1.AWSElasticBlockStoreVolumeSource(
                    fs_type = '', 
                    partition = 56, 
                    read_only = True, 
                    volume_id = '', ),
                azure_disk = kubernetes.models.v1/azure_disk_volume_source.v1.AzureDiskVolumeSource(
                    caching_mode = 'ReadWrite', 
                    disk_name = '', 
                    disk_uri = '', 
                    fs_type = 'ext4', 
                    kind = 'Shared', 
                    read_only = True, ),
                azure_file = kubernetes.models.v1/azure_file_persistent_volume_source.v1.AzureFilePersistentVolumeSource(
                    read_only = True, 
                    secret_name = '', 
                    secret_namespace = '', 
                    share_name = '', ),
                capacity = {
                    'key' : kubernetes.models.v1_pod_spec_overhead_value.v1_PodSpec_overhead_value()
                    },
                cephfs = kubernetes.models.v1/ceph_fs_persistent_volume_source.v1.CephFSPersistentVolumeSource(
                    monitors = [
                        ''
                        ], 
                    path = '', 
                    read_only = True, 
                    secret_file = '', 
                    secret_ref = null, 
                    user = '', ),
                cinder = kubernetes.models.v1/cinder_persistent_volume_source.v1.CinderPersistentVolumeSource(
                    fs_type = '', 
                    read_only = True, 
                    secret_ref = null, 
                    volume_id = '', ),
                claim_ref = kubernetes.models.v1/object_reference.v1.ObjectReference(
                    api_version = '', 
                    field_path = '', 
                    kind = '', 
                    name = '', 
                    namespace = '', 
                    resource_version = '', 
                    uid = '', ),
                csi = kubernetes.models.v1/csi_persistent_volume_source.v1.CSIPersistentVolumeSource(
                    controller_expand_secret_ref = null, 
                    controller_publish_secret_ref = null, 
                    driver = '', 
                    fs_type = '', 
                    node_expand_secret_ref = null, 
                    node_publish_secret_ref = null, 
                    node_stage_secret_ref = null, 
                    read_only = True, 
                    volume_attributes = {
                        'key' : ''
                        }, 
                    volume_handle = '', ),
                fc = kubernetes.models.v1/fc_volume_source.v1.FCVolumeSource(
                    fs_type = '', 
                    lun = 56, 
                    read_only = True, 
                    target_wwns = [
                        ''
                        ], 
                    wwids = [
                        ''
                        ], ),
                flex_volume = kubernetes.models.v1/flex_persistent_volume_source.v1.FlexPersistentVolumeSource(
                    driver = '', 
                    fs_type = '', 
                    options = {
                        'key' : ''
                        }, 
                    read_only = True, 
                    secret_ref = null, ),
                flocker = kubernetes.models.v1/flocker_volume_source.v1.FlockerVolumeSource(
                    dataset_name = '', 
                    dataset_uuid = '', ),
                gce_persistent_disk = kubernetes.models.v1/gce_persistent_disk_volume_source.v1.GCEPersistentDiskVolumeSource(
                    fs_type = '', 
                    partition = 56, 
                    pd_name = '', 
                    read_only = True, ),
                glusterfs = kubernetes.models.v1/glusterfs_persistent_volume_source.v1.GlusterfsPersistentVolumeSource(
                    endpoints = '', 
                    endpoints_namespace = '', 
                    path = '', 
                    read_only = True, ),
                host_path = kubernetes.models.v1/host_path_volume_source.v1.HostPathVolumeSource(
                    path = '', 
                    type = '', ),
                iscsi = kubernetes.models.v1/iscsi_persistent_volume_source.v1.ISCSIPersistentVolumeSource(
                    chap_auth_discovery = True, 
                    chap_auth_session = True, 
                    fs_type = '', 
                    initiator_name = '', 
                    iqn = '', 
                    iscsi_interface = 'default', 
                    lun = 56, 
                    portals = [
                        ''
                        ], 
                    read_only = True, 
                    secret_ref = null, 
                    target_portal = '', ),
                local = kubernetes.models.v1/local_volume_source.v1.LocalVolumeSource(
                    fs_type = '', 
                    path = '', ),
                mount_options = [
                    ''
                    ],
                nfs = kubernetes.models.v1/nfs_volume_source.v1.NFSVolumeSource(
                    path = '', 
                    read_only = True, 
                    server = '', ),
                node_affinity = kubernetes.models.v1/volume_node_affinity.v1.VolumeNodeAffinity(
                    required = null, ),
                persistent_volume_reclaim_policy = '',
                photon_persistent_disk = kubernetes.models.v1/photon_persistent_disk_volume_source.v1.PhotonPersistentDiskVolumeSource(
                    fs_type = '', 
                    pd_id = '', ),
                portworx_volume = kubernetes.models.v1/portworx_volume_source.v1.PortworxVolumeSource(
                    fs_type = '', 
                    read_only = True, 
                    volume_id = '', ),
                quobyte = kubernetes.models.v1/quobyte_volume_source.v1.QuobyteVolumeSource(
                    group = '', 
                    read_only = True, 
                    registry = '', 
                    tenant = '', 
                    user = '', 
                    volume = '', ),
                rbd = kubernetes.models.v1/rbd_persistent_volume_source.v1.RBDPersistentVolumeSource(
                    fs_type = '', 
                    image = '', 
                    keyring = '/etc/ceph/keyring', 
                    monitors = [
                        ''
                        ], 
                    pool = 'rbd', 
                    read_only = True, 
                    secret_ref = null, 
                    user = 'admin', ),
                scale_io = kubernetes.models.v1/scale_io_persistent_volume_source.v1.ScaleIOPersistentVolumeSource(
                    fs_type = 'xfs', 
                    gateway = '', 
                    protection_domain = '', 
                    read_only = True, 
                    secret_ref = null, 
                    ssl_enabled = True, 
                    storage_mode = 'ThinProvisioned', 
                    storage_pool = '', 
                    system = '', 
                    volume_name = '', ),
                storage_class_name = '',
                storageos = kubernetes.models.v1/storage_os_persistent_volume_source.v1.StorageOSPersistentVolumeSource(
                    fs_type = '', 
                    read_only = True, 
                    secret_ref = null, 
                    volume_name = '', 
                    volume_namespace = '', ),
                volume_attributes_class_name = '',
                volume_mode = '',
                vsphere_volume = kubernetes.models.v1/vsphere_virtual_disk_volume_source.v1.VsphereVirtualDiskVolumeSource(
                    fs_type = '', 
                    storage_policy_id = '', 
                    storage_policy_name = '', 
                    volume_path = '', )
            )
        else:
            return V1PersistentVolumeSpec(
        )
        """

    def testV1PersistentVolumeSpec(self):
        """Test V1PersistentVolumeSpec"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
