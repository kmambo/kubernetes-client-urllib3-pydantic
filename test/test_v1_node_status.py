# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from kubernetes.models.v1_node_status import V1NodeStatus

class TestV1NodeStatus(unittest.TestCase):
    """V1NodeStatus unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1NodeStatus:
        """Test V1NodeStatus
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1NodeStatus`
        """
        model = V1NodeStatus()
        if include_optional:
            return V1NodeStatus(
                addresses = [
                    null
                    ],
                allocatable = {
                    'key' : kubernetes.models.v1_pod_spec_overhead_value.v1_PodSpec_overhead_value()
                    },
                capacity = {
                    'key' : kubernetes.models.v1_pod_spec_overhead_value.v1_PodSpec_overhead_value()
                    },
                conditions = [
                    null
                    ],
                config = kubernetes.models.v1/node_config_status.v1.NodeConfigStatus(
                    active = null, 
                    assigned = null, 
                    error = '', 
                    last_known_good = null, ),
                daemon_endpoints = kubernetes.models.v1/node_daemon_endpoints.v1.NodeDaemonEndpoints(
                    kubelet_endpoint = null, ),
                features = kubernetes.models.v1/node_features.v1.NodeFeatures(
                    supplemental_groups_policy = True, ),
                images = [
                    null
                    ],
                node_info = kubernetes.models.v1/node_system_info.v1.NodeSystemInfo(
                    architecture = '', 
                    boot_id = '', 
                    container_runtime_version = '', 
                    kernel_version = '', 
                    kube_proxy_version = '', 
                    kubelet_version = '', 
                    machine_id = '', 
                    operating_system = '', 
                    os_image = '', 
                    system_uuid = '', ),
                phase = '',
                runtime_handlers = [
                    null
                    ],
                volumes_attached = [
                    null
                    ],
                volumes_in_use = [
                    ''
                    ]
            )
        else:
            return V1NodeStatus(
        )
        """

    def testV1NodeStatus(self):
        """Test V1NodeStatus"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
